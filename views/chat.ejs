<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat - <%= userGroup %></title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700&family=Roboto&display=swap" rel="stylesheet" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .cursor-dot {
            width: 10px;
            height: 10px;
            background-color: #2dd4bf;
            pointer-events: none;
        }
    
        .cursor-outline {
            width: 30px;
            height: 30px;
            border: 2px solid #0d9488;
            pointer-events: none;
        }
    
        .cursor-dot,
        .cursor-outline {
            position: fixed;
            top: 0;
            left: 0;
            transform: translate(-50%, -50%);
            border-radius: 50%;
            z-index: 999;
            transition: all 0.3s ease-out;
            mix-blend-mode: difference;
        }
    
        .hover-effect:hover ~ .cursor-outline {
            transform: translate(-50%, -50%) scale(1.5);
            background-color: rgba(45, 212, 191, 0.3);
        }
    
        .cursor-particle {
            position: fixed;
            width: 6px;
            height: 6px;
            background-color: #99f6e4;
            border-radius: 50%;
            pointer-events: none;
            z-index: 998;
            animation: particle-fade 1s forwards;
        }
    
        @keyframes particle-fade {
            0% { opacity: 1; transform: scale(1); }
            100% { opacity: 0; transform: scale(2); }
        }
    </style>
    </head>
<body>
    <div class="container mt-5">
        <!-- Add these at the top of your body -->
<div class="cursor-dot"></div>
<div class="cursor-outline"></div>
        <h2><%= userGroup %> Chat</h2>

        <!-- Chat Box -->
        <div id="chat-box" class="border p-3" style="height: 400px; overflow-y: scroll;">
            <% messages.forEach(function(message) { %>
                <div><strong><%= message.sender %>:</strong> <%= message.message %></div>
            <% }); %>
        </div>

        <!-- Message Input -->
        <form id="chat-form" class="mt-4">
            <div class="form-group">
                <input type="text" id="message" class="form-control" placeholder="Type your message..." required>
            </div>
            <button type="submit" class="btn btn-primary">Send</button>
        </form>

        <!-- Group Selector -->
        <div id="user-group-selector" class="mt-4">
            <h4>Switch Group</h4>
            <select id="group-select" class="form-control">
                <% groups.forEach(function(group) { %>
                    <option value="<%= group %>" <%= group === userGroup ? 'selected' : '' %>><%= group %></option>
                <% }); %>
            </select>
        </div>
    </div>

    <!-- Socket.IO and Custom Script -->
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        // Elements
        const chatForm = document.getElementById('chat-form');
        const chatBox = document.getElementById('chat-box');
        const messageInput = document.getElementById('message');
        const groupSelect = document.getElementById('group-select');

        // Current group variable
        let currentGroup = '<%= userGroup %>'; // Default to the user's initial group

        // Join the initial group on page load
        socket.emit('join group', currentGroup);

        // Listen for incoming messages
        socket.on('chat message', (msg) => {
            const div = document.createElement('div');
            div.innerHTML = `<strong>${msg.sender}:</strong> ${msg.message}`;
            chatBox.appendChild(div);
            chatBox.scrollTop = chatBox.scrollHeight; // Scroll to the bottom
        });

        // Form submission: Send message
        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const msg = messageInput.value;

            // Emit the message with the current group
            socket.emit('chat message', { message: msg, group: currentGroup });

            messageInput.value = ''; // Clear the input field
        });

        // Group selection: Switch group
        groupSelect.addEventListener('change', () => {
            const selectedGroup = groupSelect.value;

            if (selectedGroup !== currentGroup) {
                currentGroup = selectedGroup;
                socket.emit('join group', currentGroup);

                // Clear the chat box and request new messages for the group
                chatBox.innerHTML = `<div class="text-muted">Switched to ${currentGroup} group...</div>`;
            }
        });
    </script>
    <script>
        // Cursor Logic
        const cursorDot = document.querySelector('.cursor-dot');
        const cursorOutline = document.querySelector('.cursor-outline');
        const particles = [];
        
        // Mouse Move Listener
        window.addEventListener('mousemove', (e) => {
            cursorDot.style.left = `${e.clientX}px`;
            cursorDot.style.top = `${e.clientY}px`;
            
            cursorOutline.animate({
                left: `${e.clientX}px`,
                top: `${e.clientY}px`
            }, { duration: 500, fill: "forwards" });
    
            // Add particles
            if (particles.length < 20) {
                const particle = document.createElement('div');
                particle.className = 'cursor-particle';
                particle.style.left = `${e.clientX}px`;
                particle.style.top = `${e.clientY}px`;
                document.body.appendChild(particle);
                particles.push(particle);
                
                setTimeout(() => {
                    particle.remove();
                    particles.shift();
                }, 1000);
            }
        });
    
        // Hover Effects
        document.querySelectorAll('.hover-effect').forEach(link => {
            link.addEventListener('mouseenter', () => {
                cursorOutline.style.transform = 'translate(-50%, -50%) scale(1.5)';
                cursorOutline.style.backgroundColor = 'rgba(45, 212, 191, 0.3)';
            });
    
            link.addEventListener('mouseleave', () => {
                cursorOutline.style.transform = 'translate(-50%, -50%) scale(1)';
                cursorOutline.style.backgroundColor = 'transparent';
            });
        });
    </script>
</body>
</html>
